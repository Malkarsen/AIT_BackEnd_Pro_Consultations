-------------
Хороший тест:
-------------
1) Простой в понимании и чтении
2) Проверяет одну вещь, одну логическую операцию
3) Содержит три A: Arrange(подготовка), Act, Assert
4) Не зависим от других тестов
5) Имя отражает задачу или проверку
6) Результат один и тот же
-------------
Плохой тест:
-------------
1) Тест проверяет несколько логик или функций
2) Отсутствие покрытия тестами методов
3) Непонятное имя
4) Каждый раз разный результат
5) Нет третьего А (Assert)
6) Нет @Before... каждый раз создается новый объект в тесте(если в каждом классе используется объект)
7) Зависимости теста от внешних условий или других тестов

------------------------------------------
@BeforeEach             Перед каждым тестом
@AfterEach              После каждого теста

@BeforeAll              Один раз до всего
@AfterAll               Один раз после всего

@Test                   Тест
@DisplayName("Text")    Отображаемое имя теста
@Disabled("Text")       Пропуск теста со следующим текстом

-------------------------
Параметризированные тесты
-------------------------
1) Лист с одинаковыми данными
@ParameterizedTest
@ValueSource(ints = {2, 5, 6, 9, 23})
void testShouldReturnTrue(int number)

2) Лист с объектами (передаваемое значение, ожидаемый результат)
@ParameterizedTest
@CsvSource({
    "5", "false",
    "12", "false",
    ...
})
void shouldCheckPersonAge(int age, boolean expected)

------------------------------------------
(ожидаемое, получаемое значения)
------------------------------------------
assertEquals(3, result);    равны
assertNotEquals(4, 3);      не равны
assertTrue(true);           истина
assertFalse(false);         ложь
assertNull(null);           нуль
assertNotNull(result);      не нуль
assertThrows();             выбрасывается исключение
Пример: assertThrows(Exception.class, () -> calculator.add(1, 2));